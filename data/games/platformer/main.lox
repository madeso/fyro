var random = new fyro.Random();
var BLOCK_SIZE = 50;
var GAME_SIZE = 200;
var PLAYER_SIZE = 22;
var RUN_TIMER = 0.1;
var MAX_SLIDE = -20;
var ACCELERATION = 3;
var DEACC = 2;

fun abs(x)
{
	if(x >= 0) { return x;}
	else { return -x; }
}

fun max(lhs, rhs)
{
	if(lhs < rhs) { return rhs; }
	else { return lhs; }
}

fun sign(x)
{
	if(x >= 0) { return 1;}
	else { return -1; }
}

fun to_zero(adx, dt, anim)
{
	var dx = adx - sign(adx) * dt * anim;
	if(sign(adx) != sign(dx)) { return 0; }
	if(abs(dx) < 0.1) { return 0; }
	return dx;
}

fun keep_within(min, val, max)
{
	if(val < min) { return min; }
	if(val > max) { return max; }
	return val;
}

fun change_keep_within(min, val, change, max)
{
	if((val+change) < min) { if(val < min) { return val;} else { return min;} }
	if((val+change) > max) { if(val > max) { return val;} else { return max;} }
	return val+change;
}

class PlayerAnim
{
	var idle;
	var run;
	var jump;
	var fall;
	var wall;

	fun init(name)
	{
		this.idle = fyro.load_sprite("gfx/Main Characters/" + name + "/Idle (32x32).png", 11, 1, 0.05, []);
		this.idle.set_size(32, 32);
		this.idle.align(0.5, 0);

		this.run = fyro.load_sprite("gfx/Main Characters/" + name + "/Run (32x32).png", 12, 1, 0.05, []);
		this.run.set_size(32, 32);
		this.run.align(0.5, 0);

		this.jump = fyro.load_sprite("gfx/Main Characters/" + name + "/Jump (32x32).png", 1, 1, 0.05, []);
		this.jump.set_size(32, 32);
		this.jump.align(0.5, 0);

		this.fall = fyro.load_sprite("gfx/Main Characters/" + name + "/Fall (32x32).png", 1, 1, 0.05, []);
		this.fall.set_size(32, 32);
		this.fall.align(0.5, 0);

		this.wall = fyro.load_sprite("gfx/Main Characters/" + name + "/Wall Jump (32x32).png", 5, 1, 0.05, []);
		this.wall.set_size(32, 32);
		this.wall.align(0.5, 0);
	}
}

var pinkman = new PlayerAnim("Pink Man");

class Player : fyro.Actor
{
	var input;
	var dx = 0;
	var dy = 0;
	var facing_right = true;

	var run_timer = 0;
	var floor_timer = 0;
	var wall_timer = 0;

	fun init()
	{
		super();
		this.set_lrud(-7, 7, PLAYER_SIZE, 0);

		// hope we don't collide here
		this.x = 100;
		this.y = 175;
	}

	fun update(dt)
	{
		var gravity = 160;
		var speed = 50;
		var collided;

		if(abs(this.input.current.axis_left_x) > 0.1)
		{
			this.dx = change_keep_within(-1, this.dx, this.input.current.axis_left_x * dt * ACCELERATION, 1);
		}
		else
		{
			this.dx = to_zero(this.dx, dt, DEACC);
		}

		collided = this.move_x(speed * dt * this.dx);
		if(collided)
		{
			this.wall_timer = 0;
			this.dx = 0;

			// enable sliding
			this.dy = max(this.dy, MAX_SLIDE);
		}
		else
		{
			this.wall_timer += dt;
		}
		
		this.dy -= dt * gravity;

		collided = this.move_y(this.dy * dt);
		if(collided and this.dy < 10)
		{
			this.floor_timer = 0;
		}
		else
		{
			this.floor_timer += dt;
		}

		if(collided)
		{
			if(this.dy < -160)
			{
				this.input.run_haptics(1.0, 0.2);
				// print this.dy;
				this.flicker(1.0, 0.03);
			}
			else if(this.dy < -105)
			{
				this.input.run_haptics(0.25, 0.2);
				this.flicker(0.5, 0.03);
				// print this.dy;
			}
			this.dy = 0;
		}

		if(this.run_timer > 0)
		{
			this.run_timer -= dt;
		}

		if(abs(this.input.current.axis_left_x) > 0.1)
		{
			this.run_timer = RUN_TIMER;

			this.facing_right = this.input.current.axis_left_x > 0;
		}

		if(this.input.current.button_x and this.input.last.button_x == false)
		{
			if(this.floor_timer < 0.1)
			{
				this.dy = 100;
			}
			else if(this.wall_timer < 0.1)
			{
				this.dy = 90;
				this.dx = -1 * sign(this.input.current.axis_left_x);
			}
		}
	}

	fun render(cmd)
	{
		var char = pinkman;
		// cmd.rect(fyro.rgb.red, this.x, this.y, this.width, this.height);
		var anim = char.idle;
		if(this.run_timer > 0)
		{
			anim = char.run;
		}
		if(this.floor_timer > 0.2 )
		{
			if(this.dy > 0)
			{
				anim = char.jump;
			}
			else
			{
				anim = char.fall;
			}
		}
		if(this.wall_timer < 0.2 and this.dy <= MAX_SLIDE)
		{
			anim = char.wall;
		}
		cmd.sprite(anim, this.x, this.y, !this.facing_right, false);
	}
}

class GameState
{
	var level;
	var player;

	fun init()
	{
		this.start();
	}

	fun add_strawberry_to_level(x, y)
	{
		// todo(Gustav): add multiple arguments and/or formatting to print function
		print("Adding starberry to level");
		print(x);
		print(y);
	}

	fun start()
	{
		this.level = new fyro.Level();
		// todo(Gustav): setup player object loader
		this.level.add_loader_from_tileset("Strawberry", this.add_strawberry_to_level);
		this.level.load_tmx("level1.tmx");
		this.player = new Player();
		this.level.add(this.player);
	}

	fun update(dt)
	{
		this.player.input = fyro.get_input();
		this.level.update(dt);

		if(this.player.y < -PLAYER_SIZE)
		{
			this.start();
		}
	}

	fun render(cmd)
	{
		cmd.windowbox(GAME_SIZE, GAME_SIZE);
		cmd.look_at(this.player.x, this.player.y, this.level);
		cmd.clear(fyro.rgb.dark_gray);
		this.level.render(cmd);
	}
}

fyro.set_state(new GameState());
